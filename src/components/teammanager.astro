---
import { Tabs, TabsList, TabsTrigger, TabsContent } from "@/components/starwind/tabs";
import '../styles/global.css';
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
  DialogClose,
} from "@/components/starwind/dialog";

import { Input } from "@/components/starwind/input";

import { Label } from "@/components/starwind/label";

import { Button } from "@/components/starwind/button";
---

<Tabs defaultValue="" class="w-full flex flex-col justify-start items-start bg-neutral-800 p-5 rounded-xl max-[780px]:rounded-3xl">
  <TabsList class="tabs-list w-full flex justify-start items-start bg-neutral-800">
    <DialogTrigger for="añadir-equipo" asChild>
      <Button>Añadir equipo</Button>
    </DialogTrigger>
  </TabsList>
  <TabsContent value="">
  </TabsContent>
</Tabs>

<Dialog id="añadir-equipo">
  <DialogContent class="sm:max-w-[450px]" animationDuration={200}>
    <form id="añadir-equipo-form" method="dialog" class="flex flex-col gap-4">
      <DialogHeader>
        <DialogTitle class="text-neutral-200">Añadir equipo</DialogTitle>
        <DialogDescription>
          Make changes to your profile here. Click save when you're done.
        </DialogDescription>
      </DialogHeader>
      <div class="grid gap-4 py-4">
        <div class="grid grid-cols-4 items-center gap-4">
          <Label for="name-edit" class="text-right"> Nombre </Label>
          <Input id="name-edit" name="name" placeholder="Pedro Duarte" class="col-span-3" required/>
        </div>
        <div class="grid grid-cols-4 items-center gap-4">
          <Label for="balance" class="text-right"> Presupuesto </Label>
          <Input id="balance" name="balance" type="number" min="0" placeholder="0" class="col-span-3" />
        </div>
      </div>
      <DialogFooter>
        <DialogClose asChild>
          <Button type="button" variant="outline" class="text-neutral-200">Cancelar</Button>
        </DialogClose>
        <Button type="submit">Guardar equipo</Button>
      </DialogFooter>
    </form>
  </DialogContent>
</Dialog>

<script>
    import { createClient } from '@supabase/supabase-js';

    // Create client-side supabase client
    const supabaseClient = createClient(
      import.meta.env.PUBLIC_SUPABASE_URL,
      import.meta.env.PUBLIC_SUPABASE_ANON_KEY
    );

    async function createTeam(name: string, balance: number = 0) {
    try {
      // Get tokens from cookies (same method as dashboard)
      const accessToken = document.cookie
        .split('; ')
        .find(row => row.startsWith('sb-access-token='))
        ?.split('=')[1];

      const refreshToken = document.cookie
        .split('; ')
        .find(row => row.startsWith('sb-refresh-token='))
        ?.split('=')[1];

      if (!accessToken || !refreshToken) {
        throw new Error('No authentication tokens found');
      }

      // Set session
      const { data: sessionData, error: sessionError } = await supabaseClient.auth.setSession({
        access_token: accessToken,
        refresh_token: refreshToken,
      });

      if (sessionError || !sessionData.user) {
        throw new Error('Failed to restore session');
      }

      const { data, error } = await supabaseClient
        .from('teams')
        .insert([
          {
            user_id: sessionData.user.id,
            name: name,
            balance: balance
          }
        ])
        .select();

      if (error) throw error;

      return { success: true, data };
    } catch (error) {
      console.error('Error creating team:', error);
      return { success: false, error: (error as Error).message };
    }
  }

  async function getTeams() {
    try {
      // Get tokens from cookies
      const accessToken = document.cookie
        .split('; ')
        .find(row => row.startsWith('sb-access-token='))
        ?.split('=')[1];

      const refreshToken = document.cookie
        .split('; ')
        .find(row => row.startsWith('sb-refresh-token='))
        ?.split('=')[1];

      if (!accessToken || !refreshToken) {
        throw new Error('No authentication tokens found');
      }

      // Set session
      const { data: sessionData, error: sessionError } = await supabaseClient.auth.setSession({
        access_token: accessToken,
        refresh_token: refreshToken,
      });

      if (sessionError || !sessionData.user) {
        throw new Error('Failed to restore session');
      }

      const { data, error } = await supabaseClient
        .from('teams')
        .select('*')
        .eq('user_id', sessionData.user.id)
        .order('created_at', { ascending: true });

      if (error) throw error;

      return { success: true, data };
    } catch (error) {
      console.error('Error fetching teams:', error);
      return { success: false, error: (error as Error).message };
    }
  }

  async function renderTeamTabs() {
    const result = await getTeams();

    if (!result.success || !result.data) {
      console.error('Failed to load teams:', result.error);
      return;
    }

    const tabsList = document.querySelector('.tabs-list') as HTMLElement;
    if (!tabsList) return;

    // Remove existing team tabs
    const existingTeamTabs = tabsList.querySelectorAll('[data-team-tab]');
    existingTeamTabs.forEach(tab => tab.remove());

    const addButton = tabsList.querySelector('[data-dialog-trigger]') || tabsList.querySelector('button') || tabsList.lastElementChild;

    result.data.forEach((team: any) => {
      // Create the TabsTrigger element with correct Starwind classes
      const tabTrigger = document.createElement('button');
      tabTrigger.className = 'max-w-[200px] w-auto starwind-transition-colors inline-flex grow items-center justify-center rounded-sm px-3 py-1.5 font-medium whitespace-nowrap data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm focus-visible:outline-outline focus-visible:outline-2 focus-visible:outline-offset-2 disabled:pointer-events-none disabled:opacity-50';

      tabTrigger.setAttribute('data-tabs-trigger', '');
      tabTrigger.setAttribute('data-value', `team-${team.id}`);
      tabTrigger.setAttribute('data-state', 'inactive');
      tabTrigger.setAttribute('data-team-tab', 'true');
      tabTrigger.setAttribute('role', 'tab');
      tabTrigger.setAttribute('aria-selected', 'false');
      tabTrigger.setAttribute('type', 'button');
      tabTrigger.textContent = team.name;

      // Add click event listener to make it interactive
      tabTrigger.addEventListener('click', () => {
        // Deactivate all tabs
        const allTabs = tabsList.querySelectorAll('[data-tabs-trigger]');
        allTabs.forEach(tab => {
          tab.setAttribute('data-state', 'inactive');
          tab.setAttribute('aria-selected', 'false');
        });

        // Activate clicked tab
        tabTrigger.setAttribute('data-state', 'active');
        tabTrigger.setAttribute('aria-selected', 'true');

        // Hide all tab contents
        const tabsContainer = tabsList.closest('[data-tabs-root]');
        if (tabsContainer) {
          const allContents = tabsContainer.querySelectorAll('[data-tabs-content]');
          allContents.forEach(content => {
            content.setAttribute('data-state', 'inactive');
          });
        }

        // Show corresponding content (you'll need to create TabsContent for each team)
        // For now, just log the selected team
        console.log('Selected team:', team.name);
      });

      // Insert before the add button
      const dialogTrigger = tabsList.querySelector('button')?.closest('[data-dialog-trigger]') || tabsList.querySelector('button')?.parentElement;

  // Insert before the DialogTrigger wrapper
  if (dialogTrigger && dialogTrigger.parentElement === tabsList) {
    tabsList.insertBefore(tabTrigger, dialogTrigger);
  } else {
    // Fallback to prepend (add at beginning)
    tabsList.prepend(tabTrigger);
  }
    });
  }

    function handleFormSubmit() {
      const form = document.querySelector("#añadir-equipo-form") as HTMLFormElement;

      if (form) {
        form.addEventListener("submit", async (e) => {
    e.preventDefault();
    const formData = new FormData(form);
    const name = formData.get('name') as string;
    const balanceStr = formData.get('balance') as string;
    const balance = balanceStr ? parseFloat(balanceStr) : 0;

    if (!name?.trim()) {
      alert('Por favor introduce el nombre del equipo');
      return;
    }

    if (balance < 0) {
      alert('El presupuesto no puede ser negativo!');
      return;
    }

    const result = await createTeam(name.trim(), balance);

    if (result.success) {
    alert('Equipo creado!');
    form.reset();
    await renderTeamTabs(); // Refresh the team tabs
    // Close dialog or refresh teams list
  } else {
    alert(`Error creando equipo: ${result.error}`);
  }
  });
      }
    }
    

    handleFormSubmit();
    document.addEventListener("astro:after-swap", handleFormSubmit);

    document.addEventListener('DOMContentLoaded', renderTeamTabs);
    document.addEventListener("astro:after-swap", () => {
    handleFormSubmit();
    renderTeamTabs();
  });
  </script>